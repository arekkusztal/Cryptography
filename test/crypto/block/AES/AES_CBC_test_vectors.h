#ifndef AES_CBC_TEST_VECTORS_H
#define AES_CBC_TEST_VECTORS_H

#include <stdint.h>
#include <CRYPTO_LIB_common.h>

uint8_t plaintext_1[] = {
		0x54, 0x77, 0x6F, 0x20, 0x4F, 0x6E, 0x65, 0x20,
		0x4E, 0x69, 0x6E, 0x65, 0x20, 0x54, 0x77, 0x6F,
		0x54, 0x77, 0x6F, 0x20, 0x4F, 0x6E, 0x65, 0x20,
		0x4E, 0x69, 0x6E, 0x35, 0x20, 0x54, 0x77, 0x6F
};

uint8_t plaintext_2[] = {
		"What a lousy earth! He wondered how many people "
		"were destitute that same night even in his own "
		"prosperous country, how many homes were "
		"shanties, how many husbands were drunk and "
		"wives socked, and how many children were "
		"bullied, abused, or abandoned. How many "
		"families hungered for food they could not "
		"afford to buy? How many hearts were broken? How "
		"many suicides would take place that same night, "
		"how many people would go insane? How many "
		"cockroaches and landlords would triumph? How "
		"many winners were losers, successes failures, "
		"and rich men poor men? How many wise guys were "
		"stupid? How many happy endings were unhappy "
		"endings? How many honest men were liars, brave "
		"men cowards, loyal men traitors, how many "
		"sainted men were corrupt, how many people in "
		"positions of trust had sold their souls to "
		"bodyguards, how many had never had souls? How "
		"many straight-and-narrow paths were crooked "
		"paths? How many best families were worst "
		"families and how many good people were bad "
		"people? When you added them all up and then "
		"subtracted, you might be left with only the "
		"children, and perhaps with Albert Einstein and "
		"an old violinist or sculptor somewhere."

};

uint8_t plaintext_3[] = {
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0e, 0x0f
};

struct AES_test_vector AES_test_vector_1 = {
		.mode = CBC,
		.iv = { 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00 },
		.key = {
				.data = {
						0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6d, 0x79,
						0x20, 0x4b, 0x75, 0x6e, 0x67, 0x20, 0x46, 0x75 },
				.len = 16
		},
		.plaintext = {
				.data = plaintext_1,
				.len = 32
		},
		.ciphertext = {
				.data = {
						0x3D, 0x4C, 0x64, 0x11, 0x25, 0x80, 0x2A, 0x3F,
						0xD9, 0x49, 0xBD, 0x59, 0x5E, 0xA0, 0x07, 0x8B,
						0xDB, 0xF4, 0x0D, 0x64, 0x80, 0xC6, 0x21, 0x33,
						0xE1, 0xEC, 0xC6, 0xA4, 0x1B, 0x4E, 0xF4, 0x18
				},
				.len = 32
		}

};

/* Borrowed from DPDK xP */
struct AES_test_vector AES_test_vector_cbc_128 = {
		.mode = CBC,
		.iv = {
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
				0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
		},
		.key = {
				.data = {
						0xE4, 0x23, 0x33, 0x8A, 0x35, 0x64, 0x61, 0xE2,
						0x49, 0x03, 0xDD, 0xC6, 0xB8, 0xCA, 0x55, 0x7A
				},
				.len = 16
		},
		.plaintext = {
				.data = plaintext_2,
				.len = 512
		},
		.ciphertext = {
				.data = {
						0x8B, 0x4D, 0xDA, 0x1B, 0xCF, 0x04, 0xA0, 0x31,
							0xB4, 0xBF, 0xBD, 0x68, 0x43, 0x20, 0x7E, 0x76,
							0xB1, 0x96, 0x8B, 0xA2, 0x7C, 0xA2, 0x83, 0x9E,
							0x39, 0x5A, 0x2F, 0x7E, 0x92, 0xB4, 0x48, 0x1A,
							0x3F, 0x6B, 0x5D, 0xDF, 0x52, 0x85, 0x5F, 0x8E,
							0x42, 0x3C, 0xFB, 0xE9, 0x1A, 0x24, 0xD6, 0x08,
							0xDD, 0xFD, 0x16, 0xFB, 0xE9, 0x55, 0xEF, 0xF0,
							0xA0, 0x8D, 0x13, 0xAB, 0x81, 0xC6, 0x90, 0x01,
							0xB5, 0x18, 0x84, 0xB3, 0xF6, 0xE6, 0x11, 0x57,
							0xD6, 0x71, 0xC6, 0x3C, 0x3F, 0x2F, 0x33, 0xEE,
							0x24, 0x42, 0x6E, 0xAC, 0x0B, 0xCA, 0xEC, 0xF9,
							0x84, 0xF8, 0x22, 0xAA, 0x60, 0xF0, 0x32, 0xA9,
							0x75, 0x75, 0x3B, 0xCB, 0x70, 0x21, 0x0A, 0x8D,
							0x0F, 0xE0, 0xC4, 0x78, 0x2B, 0xF8, 0x97, 0xE3,
							0xE4, 0x26, 0x4B, 0x29, 0xDA, 0x88, 0xCD, 0x46,
							0xEC, 0xAA, 0xF9, 0x7F, 0xF1, 0x15, 0xEA, 0xC3,
							0x87, 0xE6, 0x31, 0xF2, 0xCF, 0xDE, 0x4D, 0x80,
							0x70, 0x91, 0x7E, 0x0C, 0xF7, 0x26, 0x3A, 0x92,
							0x4F, 0x18, 0x83, 0xC0, 0x8F, 0x59, 0x01, 0xA5,
							0x88, 0xD1, 0xDB, 0x26, 0x71, 0x27, 0x16, 0xF5,
							0xEE, 0x10, 0x82, 0xAC, 0x68, 0x26, 0x9B, 0xE2,
							0x6D, 0xD8, 0x9A, 0x80, 0xDF, 0x04, 0x31, 0xD5,
							0xF1, 0x35, 0x5C, 0x3B, 0xDD, 0x9A, 0x65, 0xBA,
							0x58, 0x34, 0x85, 0x61, 0x1C, 0x42, 0x10, 0x76,
							0x73, 0x02, 0x42, 0xC9, 0x23, 0x18, 0x8E, 0xB4,
							0x6F, 0xB4, 0xA3, 0x54, 0x6E, 0x88, 0x3B, 0x62,
							0x7C, 0x02, 0x8D, 0x4C, 0x9F, 0xC8, 0x45, 0xF4,
							0xC9, 0xDE, 0x4F, 0xEB, 0x22, 0x83, 0x1B, 0xE4,
							0x49, 0x37, 0xE4, 0xAD, 0xE7, 0xCD, 0x21, 0x54,
							0xBC, 0x1C, 0xC2, 0x04, 0x97, 0xB4, 0x10, 0x61,
							0xF0, 0xE4, 0xEF, 0x27, 0x63, 0x3A, 0xDA, 0x91,
							0x41, 0x25, 0x62, 0x1C, 0x5C, 0xB6, 0x38, 0x4A,
							0x88, 0x71, 0x59, 0x5A, 0x8D, 0xA0, 0x09, 0xAF,
							0x72, 0x94, 0xD7, 0x79, 0x5C, 0x60, 0x7C, 0x8F,
							0x4C, 0xF5, 0xD9, 0xA1, 0x39, 0x6D, 0x81, 0x28,
							0xEF, 0x13, 0x28, 0xDF, 0xF5, 0x3E, 0xF7, 0x8E,
							0x09, 0x9C, 0x78, 0x18, 0x79, 0xB8, 0x68, 0xD7,
							0xA8, 0x29, 0x62, 0xAD, 0xDE, 0xE1, 0x61, 0x76,
							0x1B, 0x05, 0x16, 0xCD, 0xBF, 0x02, 0x8E, 0xA6,
							0x43, 0x6E, 0x92, 0x55, 0x4F, 0x60, 0x9C, 0x03,
							0xB8, 0x4F, 0xA3, 0x02, 0xAC, 0xA8, 0xA7, 0x0C,
							0x1E, 0xB5, 0x6B, 0xF8, 0xC8, 0x4D, 0xDE, 0xD2,
							0xB0, 0x29, 0x6E, 0x40, 0xE6, 0xD6, 0xC9, 0xE6,
							0xB9, 0x0F, 0xB6, 0x63, 0xF5, 0xAA, 0x2B, 0x96,
							0xA7, 0x16, 0xAC, 0x4E, 0x0A, 0x33, 0x1C, 0xA6,
							0xE6, 0xBD, 0x8A, 0xCF, 0x40, 0xA9, 0xB2, 0xFA,
							0x63, 0x27, 0xFD, 0x9B, 0xD9, 0xFC, 0xD5, 0x87,
							0x8D, 0x4C, 0xB6, 0xA4, 0xCB, 0xE7, 0x74, 0x55,
							0xF4, 0xFB, 0x41, 0x25, 0xB5, 0x4B, 0x0A, 0x1B,
							0xB1, 0xD6, 0xB7, 0xD9, 0x47, 0x2A, 0xC3, 0x98,
							0x6A, 0xC4, 0x03, 0x73, 0x1F, 0x93, 0x6E, 0x53,
							0x19, 0x25, 0x64, 0x15, 0x83, 0xF9, 0x73, 0x2A,
							0x74, 0xB4, 0x93, 0x69, 0xC4, 0x72, 0xFC, 0x26,
							0xA2, 0x9F, 0x43, 0x45, 0xDD, 0xB9, 0xEF, 0x36,
							0xC8, 0x3A, 0xCD, 0x99, 0x9B, 0x54, 0x1A, 0x36,
							0xC1, 0x59, 0xF8, 0x98, 0xA8, 0xCC, 0x28, 0x0D,
							0x73, 0x4C, 0xEE, 0x98, 0xCB, 0x7C, 0x58, 0x7E,
							0x20, 0x75, 0x1E, 0xB7, 0xC9, 0xF8, 0xF2, 0x0E,
							0x63, 0x9E, 0x05, 0x78, 0x1A, 0xB6, 0xA8, 0x7A,
							0xF9, 0x98, 0x6A, 0xA6, 0x46, 0x84, 0x2E, 0xF6,
							0x4B, 0xDC, 0x9B, 0x8F, 0x9B, 0x8F, 0xEE, 0xB4,
							0xAA, 0x3F, 0xEE, 0xC0, 0x37, 0x27, 0x76, 0xC7,
							0x95, 0xBB, 0x26, 0x74, 0x69, 0x12, 0x7F, 0xF1,
							0xBB, 0xFF, 0xAE, 0xB5, 0x99, 0x6E, 0xCB, 0x0C
				},
				.len = 512
		}
};

struct AES_test_vector AES_test_vector_128_2 = {
		.mode = CBC,
		.iv = {
				0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00
		},
		.key = {
				.data = {
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00
				},
				.len = 16
		},
		.plaintext = {
				.data = plaintext_1,
				.len = 32
		},
		.ciphertext = {
				.data = {
						0x3D, 0x4C, 0x64, 0x11, 0x25, 0x80, 0x2A, 0x3F,
						0xD9, 0x49, 0xBD, 0x59, 0x5E, 0xA0, 0x07, 0x8B,
						0xDB, 0xF4, 0x0D, 0x64, 0x80, 0xC6, 0x21, 0x33,
						0xE1, 0xEC, 0xC6, 0xA4, 0x1B, 0x4E, 0xF4, 0x18
				},
				.len = 32
		}

};

/* Borrowed from DPDK xP */
struct AES_test_vector AES_test_vector_cbc_192 = {
		.mode = CBC,
		.iv = {
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
				0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
		},
		.key = {
				.data = {
						0xE4, 0x23, 0x33, 0x8A, 0x35, 0x64, 0x61, 0xE2,
						0x49, 0x03, 0xDD, 0xC6, 0xB8, 0xCA, 0x55, 0x7A,
						0xD4, 0xC3, 0xA3, 0xAA, 0x33, 0x62, 0x61, 0xE0
				},
				.len = 24
		},
		.plaintext = {
				.data = plaintext_2,
				.len = 512
		},
		.ciphertext = {
				.data = {

				},
				.len = 512
		}
};

struct AES_test_vector AES_test_vector_cbc_192_2 = {
		.mode = CBC,
		.iv = {
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
				0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
		},
		.key = {
				.data = {
				},
				.len = 24
		},
		.plaintext = {
				.data = plaintext_3,
				.len = 16
		},
		.ciphertext = {
				.data = {

				},
				.len = 512
		}
};

/* Borrowed from DPDK xP */
struct AES_test_vector AES_test_vector_cbc_256 = {
		.mode = CBC,
		.iv = {
				0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
				0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
		},
		.key = {
				.data = {
						0xE4, 0x23, 0x33, 0x8A, 0x35, 0x64, 0x61, 0xE2,
						0x49, 0x03, 0xDD, 0xC6, 0xB8, 0xCA, 0x55, 0x7A,
						0xD4, 0xC3, 0xA3, 0xAA, 0x33, 0x62, 0x61, 0xE0,
						0x37, 0x07, 0xB8, 0x23, 0xA2, 0xA3, 0xB5, 0x8D
				},
				.len = 32
		},
		.plaintext = {
				.data = plaintext_2,
				.len = 512
		},
		.ciphertext = {
				.data = {

				},
				.len = 512
		}
};

#endif

